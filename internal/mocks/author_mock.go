// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/model/author.go
//
// Generated by this command:
//
//	mockgen -source=pkg/model/author.go -destination=internal/mocks/author_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/bagasss3/go-article/pkg/model"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthorRepository is a mock of AuthorRepository interface.
type MockAuthorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorRepositoryMockRecorder
	isgomock struct{}
}

// MockAuthorRepositoryMockRecorder is the mock recorder for MockAuthorRepository.
type MockAuthorRepositoryMockRecorder struct {
	mock *MockAuthorRepository
}

// NewMockAuthorRepository creates a new mock instance.
func NewMockAuthorRepository(ctrl *gomock.Controller) *MockAuthorRepository {
	mock := &MockAuthorRepository{ctrl: ctrl}
	mock.recorder = &MockAuthorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorRepository) EXPECT() *MockAuthorRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAuthorRepository) Create(ctx context.Context, author *model.Author) (*model.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, author)
	ret0, _ := ret[0].(*model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAuthorRepositoryMockRecorder) Create(ctx, author any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthorRepository)(nil).Create), ctx, author)
}

// FindByID mocks base method.
func (m *MockAuthorRepository) FindByID(ctx context.Context, id uuid.UUID) (*model.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockAuthorRepositoryMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockAuthorRepository)(nil).FindByID), ctx, id)
}

// MockAuthorMethodService is a mock of AuthorMethodService interface.
type MockAuthorMethodService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorMethodServiceMockRecorder
	isgomock struct{}
}

// MockAuthorMethodServiceMockRecorder is the mock recorder for MockAuthorMethodService.
type MockAuthorMethodServiceMockRecorder struct {
	mock *MockAuthorMethodService
}

// NewMockAuthorMethodService creates a new mock instance.
func NewMockAuthorMethodService(ctrl *gomock.Controller) *MockAuthorMethodService {
	mock := &MockAuthorMethodService{ctrl: ctrl}
	mock.recorder = &MockAuthorMethodServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorMethodService) EXPECT() *MockAuthorMethodServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAuthorMethodService) Create(ctx context.Context, req *model.CreateAuthorRequest) (*model.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(*model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAuthorMethodServiceMockRecorder) Create(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthorMethodService)(nil).Create), ctx, req)
}

// FindByID mocks base method.
func (m *MockAuthorMethodService) FindByID(ctx context.Context, id string) (*model.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockAuthorMethodServiceMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockAuthorMethodService)(nil).FindByID), ctx, id)
}
