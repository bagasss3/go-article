// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/model/article.go
//
// Generated by this command:
//
//	mockgen -source=pkg/model/article.go -destination=internal/mocks/article_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/bagasss3/go-article/pkg/model"
	gomock "go.uber.org/mock/gomock"
)

// MockArticleMethodService is a mock of ArticleMethodService interface.
type MockArticleMethodService struct {
	ctrl     *gomock.Controller
	recorder *MockArticleMethodServiceMockRecorder
	isgomock struct{}
}

// MockArticleMethodServiceMockRecorder is the mock recorder for MockArticleMethodService.
type MockArticleMethodServiceMockRecorder struct {
	mock *MockArticleMethodService
}

// NewMockArticleMethodService creates a new mock instance.
func NewMockArticleMethodService(ctrl *gomock.Controller) *MockArticleMethodService {
	mock := &MockArticleMethodService{ctrl: ctrl}
	mock.recorder = &MockArticleMethodServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleMethodService) EXPECT() *MockArticleMethodServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockArticleMethodService) Create(ctx context.Context, req *model.CreateArticleRequest) (*model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(*model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockArticleMethodServiceMockRecorder) Create(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockArticleMethodService)(nil).Create), ctx, req)
}

// FindAll mocks base method.
func (m *MockArticleMethodService) FindAll(ctx context.Context, filter model.ArticleQuery) ([]*model.Article, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, filter)
	ret0, _ := ret[0].([]*model.Article)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockArticleMethodServiceMockRecorder) FindAll(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockArticleMethodService)(nil).FindAll), ctx, filter)
}

// MockArticleRepository is a mock of ArticleRepository interface.
type MockArticleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockArticleRepositoryMockRecorder
	isgomock struct{}
}

// MockArticleRepositoryMockRecorder is the mock recorder for MockArticleRepository.
type MockArticleRepositoryMockRecorder struct {
	mock *MockArticleRepository
}

// NewMockArticleRepository creates a new mock instance.
func NewMockArticleRepository(ctrl *gomock.Controller) *MockArticleRepository {
	mock := &MockArticleRepository{ctrl: ctrl}
	mock.recorder = &MockArticleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleRepository) EXPECT() *MockArticleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockArticleRepository) Create(ctx context.Context, article *model.Article) (*model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, article)
	ret0, _ := ret[0].(*model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockArticleRepositoryMockRecorder) Create(ctx, article any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockArticleRepository)(nil).Create), ctx, article)
}

// FindAll mocks base method.
func (m *MockArticleRepository) FindAll(ctx context.Context, filter model.ArticleQuery) ([]*model.Article, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, filter)
	ret0, _ := ret[0].([]*model.Article)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockArticleRepositoryMockRecorder) FindAll(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockArticleRepository)(nil).FindAll), ctx, filter)
}
